version: '3.8'

services:
  # Main Application Service (includes queue worker and scheduler via supervisor)
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ecom-ai-app-prod
    restart: always
    working_dir: /var/www/html
    env_file:
      - .env
    volumes:
      # Only persist storage directory (no code mounts in production)
      - storage-data:/var/www/html/storage
    ports:
      - "${APP_PORT:-80}:80"
    environment:
      # Database configuration
      - DB_CONNECTION=${DB_CONNECTION:-mysql}
      - DB_HOST=${DB_HOST:-mysql}
      - DB_PORT=${DB_PORT:-3306}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      # Redis configuration
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-null}
      # Cache and session
      - CACHE_STORE=${CACHE_STORE:-redis}
      - SESSION_DRIVER=${SESSION_DRIVER:-redis}
      - QUEUE_CONNECTION=${QUEUE_CONNECTION:-redis}
      # Application
      - APP_NAME=${APP_NAME}
      - APP_ENV=${APP_ENV:-production}
      - APP_KEY=${APP_KEY}
      - APP_DEBUG=${APP_DEBUG:-false}
      - APP_URL=${APP_URL}
      - LOG_CHANNEL=${LOG_CHANNEL:-stack}
      - LOG_LEVEL=${LOG_LEVEL:-error}
      # Mail configuration
      - MAIL_MAILER=${MAIL_MAILER}
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - MAIL_ENCRYPTION=${MAIL_ENCRYPTION}
      - MAIL_FROM_ADDRESS=${MAIL_FROM_ADDRESS}
      - MAIL_FROM_NAME=${MAIL_FROM_NAME}
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ecom-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MySQL Database Service
  mysql:
    image: mysql:8.0
    container_name: ecom-ai-mysql-prod
    restart: always
    ports:
      - "${DB_PORT:-3306}:3306"
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_ALLOW_EMPTY_PASSWORD: 'no'
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - ecom-network
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --max_connections=1000 --innodb_buffer_pool_size=512M
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${DB_USERNAME}", "-p${DB_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Service
  redis:
    image: redis:7-alpine
    container_name: ecom-ai-redis-prod
    restart: always
    ports:
      - "${REDIS_PORT:-6379}:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-null}
    volumes:
      - redis-data:/data
    networks:
      - ecom-network
    command: >
      sh -c '
      if [ "${REDIS_PASSWORD}" != "null" ] && [ -n "${REDIS_PASSWORD}" ]; then
        redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
      else
        redis-server --appendonly yes
      fi
      '
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

# Named Volumes for Data Persistence
volumes:
  mysql-data:
    driver: local
  redis-data:
    driver: local
  storage-data:
    driver: local

# Network Configuration
networks:
  ecom-network:
    driver: bridge
